%{
// #include <iostream>
#include <string>
#include "parser.hpp"
#include <stdio.h>
#include <string.h>
// #include "y.tab.h"
using namespace Beast;
using token = Parser::token;
int line_num = 1;
#if YYDEBUG == 1
    #define print(a) printf(a)
#else
    #define print(a) 
#endif
%}

%option reentrant interactive outfile="scanner.cpp" header="scanner.h"
%option yylineno
/*%option bison-bridge*/
/*%option bison-locations*/
/* %option debug */


/*"def"                     return token::DEF;*/

%s sc_BUILD sc_WORD

%%


"build"                   BEGIN(sc_BUILD);  return token::BUILD;
<INITIAL,sc_WORD>[a-zA-Z][a-zA-Z0-9_]*     BEGIN(sc_WORD); yylval->emplace<std::string>(yytext); return token::WORD;
[0-9]+                  yylval->emplace<int>(atoi(yytext)); return token::NUMBER;
"\""                      return token::QUOTE;
"("                       return token::SBRAC;
")"                       return token::EBRAC;
<sc_BUILD>":"                       return token::COLON;
"="                       return token::ASSIGN;
"*"                      return token::MULTIPLY;
"+"                      return token::ADD;
"/"                       return token::DIVIDE;
"-"                       return token::SUBTRACT;
\"[^\"]*\"                   yytext[strlen(yytext)-1]='\0'; yylval->emplace<std::string>(yytext + 1); return token::STRING_LIT;
<INITIAL,sc_WORD>#([^\n])*                   {} // comments (single line using #)
\$[a-zA-Z][a-zA-Z0-9_]*     yylval->emplace<std::string>(yytext); return token::DEREF;
\![ ]*([^\n])*              yylval->emplace<std::string>(yytext + 1); return token::COMMAND;
<sc_BUILD>[^ \n\t:]*                 yylval->emplace<std::string>(yytext); return token::FILENAME;
"\n"                      { BEGIN(INITIAL); loc->lines(yyleng); loc->step(); line_num++; return token::ENDL;}
<INITIAL>[" "\t]+                   return token::TAB/* ignore whitespace */;
<sc_BUILD,sc_WORD>" "+           ;  
<sc_BUILD,sc_WORD>"\t"+              {}
.                    return (int)yytext[0];

%%

// <INITIAL>"\t"+                    return token::TAB;
// [a-zA-Z0-9\/.-]*\.[a-zA-Z0-9\.-]+    -> previous file regex