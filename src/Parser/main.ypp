%{

// g++-11 lex.yy.cpp main.tab.cpp -D__EXTERN_C__ -ly -ll -o main
// g++-11 lex.yy.cc parser.cpp -o main -lfl -I/opt/homebrew/opt/flex/include -L/opt/homebrew/opt/flex/lib
// #include <iostream>
// #include <vector>
#include <string>
#include "scanner.h"
#include "Memory.h"
#include "Logger.h"
#include "Error.h"
extern "C" {
    int yywrap(yyscan_t yyscanner) { return 1; }
};

extern "C" int line_num;

static Beast::BuildRule s_ScratchTable;
static std::vector<std::string> s_ScratchBuildShellCommands;
%}

/* %skeleton "lalr1.cc" */
%require "3.8"
%language "c++"
%define api.parser.class {Parser}
%define api.namespace {Beast}
%define api.value.type variant
/* %define parse.trace */
%param {yyscan_t scanner}

%defines "parser.hpp"
%output "parser.cpp"
%locations
/* %define api.location.type {location} */

%code requires {
    #include <vector>
    #include <iostream>
    #include "variable_type.h"
    #include "Memory.h"
    #include "location.hh"

    using string_list = typename std::vector<std::string>;
    using io_dependancy = typename std::pair<std::string, std::vector<std::string> >;
    using assign_type = typename std::pair<std::string, MULTI_TYPE>;
}

%code provides {
    #define YY_DECL \
        int yylex(Beast::Parser::semantic_type *yylval, Beast::Parser::location_type* loc, yyscan_t yyscanner)
    YY_DECL;

    #define ERROR(a) error(a); YYERROR;
	namespace Beast {
    	void readBuildFile(Beast::BuildFile& buildFile, const std::string& inputFile="beast.build");
    }
}

%token BUILD QUOTE SBRAC EBRAC COLON ASSIGN MULTIPLY ADD DIVIDE SUBTRACT ENDL TAB // DEF

%token <std::string> WORD
%token <int>         NUMBER
%token <std::string> DEREF
%token <std::string> COMMAND
%token <std::string> FILENAME
%token <std::string> STRING_LIT

/* %nterm <std::string> def_head */
%nterm <string_list> build_head_file_list
%nterm <std::string> file
%nterm <string_list> build_cmds
%nterm <MULTI_TYPE>  expr
/* %nterm <std::string> dep */
%nterm <io_dependancy> build_head
%nterm <Beast::BuildRule> build_grp
/* %nterm <std::string> func_call */
%nterm <assign_type> assign_stmt

%nonassoc           ASSIGN
%left               ADD SUBTRACT
%left               MULTIPLY DIVIDE

%parse-param {Beast::BuildFile& buildFile}
%parse-param {Beast::Parser::location_type& loc}
%%
 
stmts:
                            {;}
    | stmts stmt            {LOG_DEBUG("STMT detected " + std::to_string(line_num));}
    ;

stmt:
      build_grp              {;}
    /* | def_grp                {;} */
    | assign_stmt ENDL       {buildFile.set($1.first, $1.second);}
    | ENDL
    ;

build_grp:
    build_head ENDL build_cmds      {
        LOG_DEBUG("BUILD detected for " + $1.first);
        // $$.setTable(s_ScratchTable);
        // $$.setDependencies($1.first, $1.second);
        // $$.setCommands(s_ScratchBuildShellCommands);
        s_ScratchTable.setCommands(s_ScratchBuildShellCommands); // newly added
        // buildFile.addBuildRule($$);
        buildFile.addBuildRule(s_ScratchTable);
        s_ScratchTable.clear();
        s_ScratchBuildShellCommands.clear();
        @$ = @1;
    }
    ;

build_head:
    BUILD build_head_file_list COLON build_head_file_list {
            if ($2.size() != 1) 
                error(@2, "exactly one output target is required");
            $$.first = $2 [0];
            $$.second = $4;
            s_ScratchTable.setDependencies($$.first, $$.second);
            LOG_DEBUG("build head detected for " + $2 [0]);
            @$ = @1;
        }
    ;

build_head_file_list:
    | build_head_file_list file         {$$ = $1; $$.push_back($2);}
    /* | WORD                              {$$.push_back($1);} // no empty rule...
    | FILENAME                          {$$.push_back($1);} // to avoid empty lists
    | build_head_file_list WORD         {$$ = $1; $$.push_back($2);}
    | build_head_file_list FILENAME     {$$ = $1; $$.push_back($2);}
    | build_head_file_list STRING_LIT   {$$ = $1; $$.push_back($2);}
    | build_head_file_list DEREF		{$$ = $1; if(buildFile.exists($2)) $$.push_back(toString(buildFile.get($2))); else $$.push_back(std::getenv($2.c_str()));}
    ; */
	;
file:
	WORD								{$$ = $1; buildFile.resolve($$, SymbolTable());}
	| FILENAME                          {$$ = $1; buildFile.resolve($$, SymbolTable());}
	| STRING_LIT                        {$$ = $1; buildFile.resolve($$, SymbolTable());}
	| DEREF                             {$$ = $1; buildFile.resolve($$, SymbolTable());}
    | BUILD                             {$$ = "build";}
	;

build_cmds:
    | build_cmds TAB COMMAND     {s_ScratchBuildShellCommands.push_back($3); }
    /* | build_cmds TAB func_call   {} // wrong for now... temporary */
    | build_cmds TAB assign_stmt {s_ScratchTable.set($3.first, $3.second);}
    | build_cmds ENDL
    | build_cmds TAB
    ;
/* 
func_call:
    WORD SBRAC EBRAC     {$$ = $1; LOG_DEBUG("Function call detected: " + $1);}
    ;

def_grp:
    def_head ENDL def_body      {std::cout << "function definition detected at " << line_num << std::endl;}
    ;

def_head:
    DEF WORD COLON          {std::cout << "def head detected\n"; $$ = $2;}
    ;

def_body:
    | def_body TAB COMMAND      {std::cout << "def body command: "<<$3 << std::endl;}
    | def_body TAB func_call
    | def_body TAB assign_stmt
    | def_body ENDL
    | def_body TAB
    ; */


assign_stmt:
      WORD ASSIGN expr        {$$ = {$1, $3}; LOG_DEBUG( "assignment detected");}
    ;

/* 
comma_seperated_lst:
    STRING_LIT                              {std::cout << "here" << std::endl;}
    | comma_seperated_lst COMMA STRING_LIT {std::cout << "new list member found " <<std::endl;}
    ; */

expr:
      WORD                          {if(s_ScratchTable.exists($1)) $$ = s_ScratchTable.get($1); else if(buildFile.exists($1)) $$ = buildFile.get($1); else error(@1, "Symbol " + $1 + " not found");}
    | NUMBER                        {$$ = $1;}
    | STRING_LIT                    {$$ = $1;}
    /* | list                          {} */
    | expr ADD expr                 {$$ = add($1, $3); LOG_DEBUG("value after addition is " + toString($$)); }
    | expr MULTIPLY expr            {$$ = multiply($1, $3); LOG_DEBUG("value after multiplication is " + toString($$));}
    | expr DIVIDE expr              {$$ = divide($1, $3); LOG_DEBUG("value after division is " + toString($$));}
    | expr SUBTRACT expr            {$$ = subtract($1, $3); LOG_DEBUG("value after subtract is " + toString($$));}
    ; 
    
/* 
list:
    SSQBRAC comma_seperated_lst ESQBRAC {std::cout << "list detected\n";}
    ; */

/* int_expr:
    NUMBER
    | WORD                  {std::cout << "I was here\n"; YYERROR;}
    | int_expr ADD int_expr
    | int_expr SUBTRACT int_expr
    | int_expr DIVIDE int_expr
    | int_expr MULTIPLY int_expr
    ;
str_expr:
    STRING_LIT
    | WORD                  {std::cout << "NOw I am here\n";}
    | str_expr ADD str_expr
    | str_expr MULTIPLY int_expr
    ; */


%%


void Beast::Parser::error(const location_type& loc, const std::string& msg) {
    RAISE_ERROR_AND_EXIT("parse error at line " + std::to_string(loc.begin.line) + ": " + msg, 1);
}

#ifdef PARSER_TEST
int main() {
    yyscan_t scanner;
    yylex_init(&scanner);
    /* std::vector<std::string> v; */
    Beast::BuildFile buildFile;
    Beast::Parser parser{scanner, buildFile};
    #if YYDEBUG == 1
        std::cout << "DEBUGGING..." << std::endl;
        parser.set_debug_level(true);
    #endif
    std::cout << "Scanner and parser generated" << std::endl;
    parser.parse();
    /* for(std::string& i : buildFile.m_BuildRules[0].m_InputTargets) {
        std::cout << i << std::endl;
    }
    std::cout << buildFile.m_BuildRules[0].m_OutputTarget << std::endl; */
    yylex_destroy(scanner);
    return 0;
}
#endif

namespace Beast {
	void readBuildFile(Beast::BuildFile& buildFile, const std::string& inputFile) {
		yyscan_t scanner;
		yylex_init(&scanner);
		Parser::location_type loc;
		FILE* inputFile_pointer = fopen(inputFile.c_str(), "r");
		if (inputFile_pointer){
			yyset_in(inputFile_pointer, scanner);
		}
		else{
			RAISE_ERROR_AND_EXIT("couldn't open file " + inputFile, 10);
		}
		Beast::Parser parser{scanner, buildFile, loc};
		#if YYDEBUG == 1
			LOG_DEBUG("DEBUGGING...");
			parser.set_debug_level(true);
		#endif
		LOG_DEBUG("Scanner and parser generated");
		parser.parse();
		yylex_destroy(scanner);
		buildFile.resolveBuildRules();
	}
}
